function [err, X, x_repro] = reconstructCuboid(x,idx)

%{

This function implement the direct method of the following paper:

Direct Calibration by Fitting of Cuboids to a Single Image Using Differential Evolution
Luis Gerardo de la Fraga and Oliver Schï¿½tze


input
x is 7*2 vector of image cooridnates of the 7 corners (7 must be >= 6)
idx is a logical binary vector of length 7 to indicate which vector to be
use in the computation of estimation X

output 
X3x4 ~ K[R|t]L subjective to||X|| = 1

%}

%{
C = [ ...
+1 +1 +1; ...
+1 -1 +1; ...
-1 -1 +1; ...
-1 +1 +1; ...
+1 +1 -1; ...
+1 -1 -1; ...
-1 -1 -1];
A = zeros(14,12);
A(1:7,1:3) = C;
A(8:14,5:7) = C;
A(1:7,9:11) = C;
A(8:14,9:11) = C;
A(1:7,4)=ones(7,1);
A(8:14,8)=ones(7,1);
A(:,12)=ones(14,1);
%}
%{
A = [...
     1     1     1     1     0     0     0     0     1     1     1     1
     1    -1     1     1     0     0     0     0     1    -1     1     1
    -1    -1     1     1     0     0     0     0    -1    -1     1     1
    -1     1     1     1     0     0     0     0    -1     1     1     1
     1     1    -1     1     0     0     0     0     1     1    -1     1
     1    -1    -1     1     0     0     0     0     1    -1    -1     1
    -1    -1    -1     1     0     0     0     0    -1    -1    -1     1
     0     0     0     0     1     1     1     1     1     1     1     1
     0     0     0     0     1    -1     1     1     1    -1     1     1
     0     0     0     0    -1    -1     1     1    -1    -1     1     1
     0     0     0     0    -1     1     1     1    -1     1     1     1
     0     0     0     0     1     1    -1     1     1     1    -1     1
     0     0     0     0     1    -1    -1     1     1    -1    -1     1
     0     0     0     0    -1    -1    -1     1    -1    -1    -1     1];
%}

%{
A = [...
     1     1     1     1     0     0     0     0    -1    -1    -1    -1
     1    -1     1     1     0     0     0     0    -1     1    -1    -1
    -1    -1     1     1     0     0     0     0     1     1    -1    -1
    -1     1     1     1     0     0     0     0     1    -1    -1    -1
     1     1    -1     1     0     0     0     0    -1    -1     1    -1
     1    -1    -1     1     0     0     0     0    -1     1     1    -1
    -1    -1    -1     1     0     0     0     0     1     1     1    -1
     0     0     0     0     1     1     1     1    -1    -1    -1    -1
     0     0     0     0     1    -1     1     1    -1     1    -1    -1
     0     0     0     0    -1    -1     1     1     1     1    -1    -1
     0     0     0     0    -1     1     1     1     1    -1    -1    -1
     0     0     0     0     1     1    -1     1    -1    -1     1    -1
     0     0     0     0     1    -1    -1     1    -1     1     1    -1
     0     0     0     0    -1    -1    -1     1     1     1     1    -1];
%indexMapping=[2 3 6 1 7 4 5]; 
indexMapping=[4 1 2 7 6 3 5]; 
A(indexMapping,:)=A(1:7,:);
A(7+indexMapping,:)=A(8:14,:); 
%A(1:7,:)=A(indexMapping,:);
%A(8:14,:)=A(7+indexMapping,:); 
%}
%{
A = [...
     1    -1     1     1     0     0     0     0    -1     1    -1    -1
    -1    -1     1     1     0     0     0     0     1     1    -1    -1
     1    -1    -1     1     0     0     0     0    -1     1     1    -1
     1     1     1     1     0     0     0     0    -1    -1    -1    -1
    -1    -1    -1     1     0     0     0     0     1     1     1    -1
    -1     1     1     1     0     0     0     0     1    -1    -1    -1
     1     1    -1     1     0     0     0     0    -1    -1     1    -1
     0     0     0     0     1    -1     1     1    -1     1    -1    -1
     0     0     0     0    -1    -1     1     1     1     1    -1    -1
     0     0     0     0     1    -1    -1     1    -1     1     1    -1
     0     0     0     0     1     1     1     1    -1    -1    -1    -1
     0     0     0     0    -1    -1    -1     1     1     1     1    -1
     0     0     0     0    -1     1     1     1     1    -1    -1    -1
     0     0     0     0     1     1    -1     1    -1    -1     1    -1];
%}
A = [...
     1    -1     1     1     0     0     0     0    -1     1    -1    -1
    -1    -1     1     1     0     0     0     0     1     1    -1    -1
     1    -1    -1     1     0     0     0     0    -1     1     1    -1
     1     1     1     1     0     0     0     0    -1    -1    -1    -1
    -1    -1    -1     1     0     0     0     0     1     1     1    -1
     1     1    -1     1     0     0     0     0    -1    -1     1    -1
    -1     1     1     1     0     0     0     0     1    -1    -1    -1
     0     0     0     0     1    -1     1     1    -1     1    -1    -1
     0     0     0     0    -1    -1     1     1     1     1    -1    -1
     0     0     0     0     1    -1    -1     1    -1     1     1    -1
     0     0     0     0     1     1     1     1    -1    -1    -1    -1
     0     0     0     0    -1    -1    -1     1     1     1     1    -1
     0     0     0     0     1     1    -1     1    -1    -1     1    -1
     0     0     0     0    -1     1     1     1     1    -1    -1    -1];    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Original (slower) code:
% $$$ A(1:7,9:12) = A(1:7,9:12).* repmat(x(:,1),1,4);
% $$$ A(8:14,9:12) = A(8:14,9:12).* repmat(x(:,2),1,4);
% $$$ [junk,junk,V] = svd(A(repmat(idx,1,2),:),0);
% $$$ X=reshape(V(:,end),4,3)';

Ax = A(1:7,1:11);
Ay = A(8:14,1:11);
Ax(:,9:11) = bsxfun(@times,Ax(:,9:11),x(:,1));
Ay(:,9:11) = bsxfun(@times,Ay(:,9:11),x(:,2));
AA = [Ax(idx,:); Ay(idx,:)];
bb = [x(idx,1); x(idx,2)];
X = reshape([AA\bb; 1],4,3)';
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

idx = ~idx;
if ~any(idx)
    idx = true(1,7);
end

x_repro = A([idx false(1,7)],1:4) * X';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Original (slower) code:
% $$$ x_repro = x_repro(:,1:2) ./ repmat(x_repro(:,3),1,2);

x_repro = bsxfun(@rdivide,x_repro(:,1:2),x_repro(:,3));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

err = sum(sum((x_repro-x(idx,1:2)).^2));




